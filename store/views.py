from django.shortcuts import render, redirect, get_object_or_404
from .models import Product, Order, OrderItem, Watchlist
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login
from django.contrib.auth.forms import UserCreationForm
from django.conf import settings
import stripe
from .forms import ProductForm
from django.db.models import Sum
from django.http import JsonResponse
from django.contrib import messages

# Set up Stripe API key
stripe.api_key = settings.STRIPE_SECRET_KEY

@login_required
def add_to_watchlist(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    watchlist, created = Watchlist.objects.get_or_create(user=request.user, product=product)
    if created:
        # Optionally, you can add a message here to indicate success
        messages.success(request, f"{product.name} has been added to your watchlist.")
    else:
        messages.info(request, f"{product.name} is already in your watchlist.")

    return redirect('product_list')

def product_detail(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    return render(request, 'store/product_detail.html', {'product': product})

@login_required
def buy_now(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    
    # Create or retrieve the active order for the user
    order, created = Order.objects.get_or_create(user=request.user, completed=False)
    
    # Create or get the OrderItem with a quantity of 1
    order_item, created = OrderItem.objects.get_or_create(order=order, product=product, defaults={'quantity': 1})
    
    # Redirect to the checkout page with this order
    return redirect('checkout')

def add_product(request):
    if request.method == 'POST':
        form = ProductForm(request.POST, request.FILES)  # Include request.FILES for image upload
        if form.is_valid():
            form.save()  # Save the product to the database
            messages.success(request, 'Product added successfully!')
            return redirect('product_list')  # Redirect to the product list view
    else:
        form = ProductForm()

    return render(request, 'store/add_product.html', {'form': form})

def product_list(request):
    # Get the current order for the user
    current_order = Order.objects.filter(user=request.user, completed=False).first()

    # Ensure that order_items is a queryset
    if current_order:
        order_items = OrderItem.objects.filter(order=current_order)  # This returns a queryset
    else:
        order_items = OrderItem.objects.none()  # Return an empty queryset if there's no current order

    # Calculate the total items in the cart
    total_items = order_items.aggregate(total=Sum('quantity'))['total'] or 0  # This now works as order_items is a queryset

    # Fetch all products for display
    products = Product.objects.all()
    return render(request, 'store/product_list.html', {
        'products': products,
        'order_items': order_items,
        'total_items': total_items,
    })

@login_required
def add_to_cart(request, product_id):
    if request.method == 'POST':
        product = get_object_or_404(Product, id=product_id)

        # Get or create the active order for the user
        order, created = Order.objects.get_or_create(user=request.user, completed=False)

        # Try to get the existing order item for the product
        order_item, created = OrderItem.objects.get_or_create(order=order, product=product)

        if created:
            # If this is a new order item, set quantity to 1
            order_item.quantity = 1
        else:
            # If the order item already exists, increment the quantity
            order_item.quantity += 1
        
        order_item.save()  # Save the order item

        # Calculate total items in the cart
        total_items = order.items.aggregate(total=Sum('quantity'))['total'] or 0

        # Set success message
        message = f'Added {product.name} to your cart!'

        return JsonResponse({'new_cart_count': total_items, 'success_message': message})
    else:
        return JsonResponse({'error': 'Invalid request method'}, status=400)

@login_required
def watchlist_view(request):
    watchlist_items = Watchlist.objects.filter(user=request.user)
    products = [item.product for item in watchlist_items]

    return render(request, 'store/watchlist.html', {'products': products})

    
@login_required
def checkout(request):
    order = get_object_or_404(Order, user=request.user, completed=False)  # Retrieve user's order

    # Calculate total price if it's not already calculated
    order.calculate_total_price()  # Make sure to call this

    if request.method == 'POST':
        token = request.POST.get('stripeToken')  # The token generated by Stripe.js
        try:
            # Calculate the total amount (in cents) for Stripe
            total_price = int(order.total_price * 100)  # Stripe expects the amount in cents

            # Create a charge using Stripe's API
            charge = stripe.Charge.create(
                amount=total_price,
                currency='usd',
                description=f'Order {order.id}',
                source=token,
            )

            # Mark the order as completed
            order.completed = True
            order.total_price = 0.00  # Reset the total price after payment
            order.save()

            # Set success message in session
            messages.success(request, 'Your order has been placed successfully!')

            return redirect('product_list')  # Redirect to product list or order confirmation
        except stripe.error.StripeError:
            # Handle the error
            messages.error(request, 'Payment failed. Please try again.')
            return render(request, 'store/checkout.html', {'error': 'Payment failed', 'order': order})

    return render(request, 'store/checkout.html', {
        'order': order,
        'total_price': order.total_price,  # Pass the total price here
        'STRIPE_TEST_PUBLIC_KEY': settings.STRIPE_TEST_PUBLIC_KEY,  # Pass the public key here
    })


def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # Automatically log the user in after registration
            messages.success(request, 'Registration successful! Welcome!')
            return redirect('product_list')  # Redirect to the product list or another page
    else:
        form = UserCreationForm()
    return render(request, 'store/register.html', {'form': form})

@login_required
def cart_view(request):
    # Get or create the order for the logged-in user
    order, created = Order.objects.get_or_create(user=request.user, completed=False)
    
    # Get all items in the cart (OrderItems)
    order_items = OrderItem.objects.filter(order=order)
    
    # Calculate total quantity of items in the cart
    total_quantity = sum(item.quantity for item in order_items)
    
    # Calculate total price of items in the cart
    total_price = sum(item.product.price * item.quantity for item in order_items)

    return render(request, 'store/cart.html', {
        'order_items': order_items,
        'total_quantity': total_quantity,  # Pass the total quantity to the template
        'total_price': total_price,  # Pass the total price to the template
    })
